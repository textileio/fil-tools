// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Top level
	BuildInfo(ctx context.Context, in *BuildInfoRequest, opts ...grpc.CallOption) (*BuildInfoResponse, error)
	UserIdentifier(ctx context.Context, in *UserIdentifierRequest, opts ...grpc.CallOption) (*UserIdentifierResponse, error)
	// Storage config
	DefaultStorageConfig(ctx context.Context, in *DefaultStorageConfigRequest, opts ...grpc.CallOption) (*DefaultStorageConfigResponse, error)
	SetDefaultStorageConfig(ctx context.Context, in *SetDefaultStorageConfigRequest, opts ...grpc.CallOption) (*SetDefaultStorageConfigResponse, error)
	ApplyStorageConfig(ctx context.Context, in *ApplyStorageConfigRequest, opts ...grpc.CallOption) (*ApplyStorageConfigResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Data
	Stage(ctx context.Context, opts ...grpc.CallOption) (UserService_StageClient, error)
	StageCid(ctx context.Context, in *StageCidRequest, opts ...grpc.CallOption) (*StageCidResponse, error)
	ReplaceData(ctx context.Context, in *ReplaceDataRequest, opts ...grpc.CallOption) (*ReplaceDataResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (UserService_GetClient, error)
	WatchLogs(ctx context.Context, in *WatchLogsRequest, opts ...grpc.CallOption) (UserService_WatchLogsClient, error)
	CidInfo(ctx context.Context, in *CidInfoRequest, opts ...grpc.CallOption) (*CidInfoResponse, error)
	// Wallet
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	NewAddress(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption) (*NewAddressResponse, error)
	Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (*AddressesResponse, error)
	SendFil(ctx context.Context, in *SendFilRequest, opts ...grpc.CallOption) (*SendFilResponse, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error)
	VerifyMessage(ctx context.Context, in *VerifyMessageRequest, opts ...grpc.CallOption) (*VerifyMessageResponse, error)
	// Storage Jobs
	StorageJob(ctx context.Context, in *StorageJobRequest, opts ...grpc.CallOption) (*StorageJobResponse, error)
	StorageConfigForJob(ctx context.Context, in *StorageConfigForJobRequest, opts ...grpc.CallOption) (*StorageConfigForJobResponse, error)
	QueuedStorageJobs(ctx context.Context, in *QueuedStorageJobsRequest, opts ...grpc.CallOption) (*QueuedStorageJobsResponse, error)
	ExecutingStorageJobs(ctx context.Context, in *ExecutingStorageJobsRequest, opts ...grpc.CallOption) (*ExecutingStorageJobsResponse, error)
	LatestFinalStorageJobs(ctx context.Context, in *LatestFinalStorageJobsRequest, opts ...grpc.CallOption) (*LatestFinalStorageJobsResponse, error)
	LatestSuccessfulStorageJobs(ctx context.Context, in *LatestSuccessfulStorageJobsRequest, opts ...grpc.CallOption) (*LatestSuccessfulStorageJobsResponse, error)
	StorageJobsSummary(ctx context.Context, in *StorageJobsSummaryRequest, opts ...grpc.CallOption) (*StorageJobsSummaryResponse, error)
	WatchStorageJobs(ctx context.Context, in *WatchStorageJobsRequest, opts ...grpc.CallOption) (UserService_WatchStorageJobsClient, error)
	CancelStorageJob(ctx context.Context, in *CancelStorageJobRequest, opts ...grpc.CallOption) (*CancelStorageJobResponse, error)
	// Deals
	StorageDealRecords(ctx context.Context, in *StorageDealRecordsRequest, opts ...grpc.CallOption) (*StorageDealRecordsResponse, error)
	RetrievalDealRecords(ctx context.Context, in *RetrievalDealRecordsRequest, opts ...grpc.CallOption) (*RetrievalDealRecordsResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) BuildInfo(ctx context.Context, in *BuildInfoRequest, opts ...grpc.CallOption) (*BuildInfoResponse, error) {
	out := new(BuildInfoResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/BuildInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserIdentifier(ctx context.Context, in *UserIdentifierRequest, opts ...grpc.CallOption) (*UserIdentifierResponse, error) {
	out := new(UserIdentifierResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/UserIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DefaultStorageConfig(ctx context.Context, in *DefaultStorageConfigRequest, opts ...grpc.CallOption) (*DefaultStorageConfigResponse, error) {
	out := new(DefaultStorageConfigResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/DefaultStorageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetDefaultStorageConfig(ctx context.Context, in *SetDefaultStorageConfigRequest, opts ...grpc.CallOption) (*SetDefaultStorageConfigResponse, error) {
	out := new(SetDefaultStorageConfigResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/SetDefaultStorageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ApplyStorageConfig(ctx context.Context, in *ApplyStorageConfigRequest, opts ...grpc.CallOption) (*ApplyStorageConfigResponse, error) {
	out := new(ApplyStorageConfigResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/ApplyStorageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Stage(ctx context.Context, opts ...grpc.CallOption) (UserService_StageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/powergate.user.v1.UserService/Stage", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceStageClient{stream}
	return x, nil
}

type UserService_StageClient interface {
	Send(*StageRequest) error
	CloseAndRecv() (*StageResponse, error)
	grpc.ClientStream
}

type userServiceStageClient struct {
	grpc.ClientStream
}

func (x *userServiceStageClient) Send(m *StageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceStageClient) CloseAndRecv() (*StageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) StageCid(ctx context.Context, in *StageCidRequest, opts ...grpc.CallOption) (*StageCidResponse, error) {
	out := new(StageCidResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/StageCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReplaceData(ctx context.Context, in *ReplaceDataRequest, opts ...grpc.CallOption) (*ReplaceDataResponse, error) {
	out := new(ReplaceDataResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/ReplaceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (UserService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[1], "/powergate.user.v1.UserService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type userServiceGetClient struct {
	grpc.ClientStream
}

func (x *userServiceGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) WatchLogs(ctx context.Context, in *WatchLogsRequest, opts ...grpc.CallOption) (UserService_WatchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[2], "/powergate.user.v1.UserService/WatchLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceWatchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_WatchLogsClient interface {
	Recv() (*WatchLogsResponse, error)
	grpc.ClientStream
}

type userServiceWatchLogsClient struct {
	grpc.ClientStream
}

func (x *userServiceWatchLogsClient) Recv() (*WatchLogsResponse, error) {
	m := new(WatchLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) CidInfo(ctx context.Context, in *CidInfoRequest, opts ...grpc.CallOption) (*CidInfoResponse, error) {
	out := new(CidInfoResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/CidInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) NewAddress(ctx context.Context, in *NewAddressRequest, opts ...grpc.CallOption) (*NewAddressResponse, error) {
	out := new(NewAddressResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/NewAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (*AddressesResponse, error) {
	out := new(AddressesResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/Addresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendFil(ctx context.Context, in *SendFilRequest, opts ...grpc.CallOption) (*SendFilResponse, error) {
	out := new(SendFilResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/SendFil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error) {
	out := new(SignMessageResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/SignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyMessage(ctx context.Context, in *VerifyMessageRequest, opts ...grpc.CallOption) (*VerifyMessageResponse, error) {
	out := new(VerifyMessageResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/VerifyMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StorageJob(ctx context.Context, in *StorageJobRequest, opts ...grpc.CallOption) (*StorageJobResponse, error) {
	out := new(StorageJobResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/StorageJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StorageConfigForJob(ctx context.Context, in *StorageConfigForJobRequest, opts ...grpc.CallOption) (*StorageConfigForJobResponse, error) {
	out := new(StorageConfigForJobResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/StorageConfigForJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueuedStorageJobs(ctx context.Context, in *QueuedStorageJobsRequest, opts ...grpc.CallOption) (*QueuedStorageJobsResponse, error) {
	out := new(QueuedStorageJobsResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/QueuedStorageJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ExecutingStorageJobs(ctx context.Context, in *ExecutingStorageJobsRequest, opts ...grpc.CallOption) (*ExecutingStorageJobsResponse, error) {
	out := new(ExecutingStorageJobsResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/ExecutingStorageJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LatestFinalStorageJobs(ctx context.Context, in *LatestFinalStorageJobsRequest, opts ...grpc.CallOption) (*LatestFinalStorageJobsResponse, error) {
	out := new(LatestFinalStorageJobsResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/LatestFinalStorageJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LatestSuccessfulStorageJobs(ctx context.Context, in *LatestSuccessfulStorageJobsRequest, opts ...grpc.CallOption) (*LatestSuccessfulStorageJobsResponse, error) {
	out := new(LatestSuccessfulStorageJobsResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/LatestSuccessfulStorageJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StorageJobsSummary(ctx context.Context, in *StorageJobsSummaryRequest, opts ...grpc.CallOption) (*StorageJobsSummaryResponse, error) {
	out := new(StorageJobsSummaryResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/StorageJobsSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) WatchStorageJobs(ctx context.Context, in *WatchStorageJobsRequest, opts ...grpc.CallOption) (UserService_WatchStorageJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[3], "/powergate.user.v1.UserService/WatchStorageJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceWatchStorageJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_WatchStorageJobsClient interface {
	Recv() (*WatchStorageJobsResponse, error)
	grpc.ClientStream
}

type userServiceWatchStorageJobsClient struct {
	grpc.ClientStream
}

func (x *userServiceWatchStorageJobsClient) Recv() (*WatchStorageJobsResponse, error) {
	m := new(WatchStorageJobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) CancelStorageJob(ctx context.Context, in *CancelStorageJobRequest, opts ...grpc.CallOption) (*CancelStorageJobResponse, error) {
	out := new(CancelStorageJobResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/CancelStorageJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StorageDealRecords(ctx context.Context, in *StorageDealRecordsRequest, opts ...grpc.CallOption) (*StorageDealRecordsResponse, error) {
	out := new(StorageDealRecordsResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/StorageDealRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RetrievalDealRecords(ctx context.Context, in *RetrievalDealRecordsRequest, opts ...grpc.CallOption) (*RetrievalDealRecordsResponse, error) {
	out := new(RetrievalDealRecordsResponse)
	err := c.cc.Invoke(ctx, "/powergate.user.v1.UserService/RetrievalDealRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Top level
	BuildInfo(context.Context, *BuildInfoRequest) (*BuildInfoResponse, error)
	UserIdentifier(context.Context, *UserIdentifierRequest) (*UserIdentifierResponse, error)
	// Storage config
	DefaultStorageConfig(context.Context, *DefaultStorageConfigRequest) (*DefaultStorageConfigResponse, error)
	SetDefaultStorageConfig(context.Context, *SetDefaultStorageConfigRequest) (*SetDefaultStorageConfigResponse, error)
	ApplyStorageConfig(context.Context, *ApplyStorageConfigRequest) (*ApplyStorageConfigResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	// Data
	Stage(UserService_StageServer) error
	StageCid(context.Context, *StageCidRequest) (*StageCidResponse, error)
	ReplaceData(context.Context, *ReplaceDataRequest) (*ReplaceDataResponse, error)
	Get(*GetRequest, UserService_GetServer) error
	WatchLogs(*WatchLogsRequest, UserService_WatchLogsServer) error
	CidInfo(context.Context, *CidInfoRequest) (*CidInfoResponse, error)
	// Wallet
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	NewAddress(context.Context, *NewAddressRequest) (*NewAddressResponse, error)
	Addresses(context.Context, *AddressesRequest) (*AddressesResponse, error)
	SendFil(context.Context, *SendFilRequest) (*SendFilResponse, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error)
	VerifyMessage(context.Context, *VerifyMessageRequest) (*VerifyMessageResponse, error)
	// Storage Jobs
	StorageJob(context.Context, *StorageJobRequest) (*StorageJobResponse, error)
	StorageConfigForJob(context.Context, *StorageConfigForJobRequest) (*StorageConfigForJobResponse, error)
	QueuedStorageJobs(context.Context, *QueuedStorageJobsRequest) (*QueuedStorageJobsResponse, error)
	ExecutingStorageJobs(context.Context, *ExecutingStorageJobsRequest) (*ExecutingStorageJobsResponse, error)
	LatestFinalStorageJobs(context.Context, *LatestFinalStorageJobsRequest) (*LatestFinalStorageJobsResponse, error)
	LatestSuccessfulStorageJobs(context.Context, *LatestSuccessfulStorageJobsRequest) (*LatestSuccessfulStorageJobsResponse, error)
	StorageJobsSummary(context.Context, *StorageJobsSummaryRequest) (*StorageJobsSummaryResponse, error)
	WatchStorageJobs(*WatchStorageJobsRequest, UserService_WatchStorageJobsServer) error
	CancelStorageJob(context.Context, *CancelStorageJobRequest) (*CancelStorageJobResponse, error)
	// Deals
	StorageDealRecords(context.Context, *StorageDealRecordsRequest) (*StorageDealRecordsResponse, error)
	RetrievalDealRecords(context.Context, *RetrievalDealRecordsRequest) (*RetrievalDealRecordsResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) BuildInfo(context.Context, *BuildInfoRequest) (*BuildInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildInfo not implemented")
}
func (UnimplementedUserServiceServer) UserIdentifier(context.Context, *UserIdentifierRequest) (*UserIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIdentifier not implemented")
}
func (UnimplementedUserServiceServer) DefaultStorageConfig(context.Context, *DefaultStorageConfigRequest) (*DefaultStorageConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultStorageConfig not implemented")
}
func (UnimplementedUserServiceServer) SetDefaultStorageConfig(context.Context, *SetDefaultStorageConfigRequest) (*SetDefaultStorageConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultStorageConfig not implemented")
}
func (UnimplementedUserServiceServer) ApplyStorageConfig(context.Context, *ApplyStorageConfigRequest) (*ApplyStorageConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyStorageConfig not implemented")
}
func (UnimplementedUserServiceServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedUserServiceServer) Stage(UserService_StageServer) error {
	return status.Errorf(codes.Unimplemented, "method Stage not implemented")
}
func (UnimplementedUserServiceServer) StageCid(context.Context, *StageCidRequest) (*StageCidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageCid not implemented")
}
func (UnimplementedUserServiceServer) ReplaceData(context.Context, *ReplaceDataRequest) (*ReplaceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceData not implemented")
}
func (UnimplementedUserServiceServer) Get(*GetRequest, UserService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserServiceServer) WatchLogs(*WatchLogsRequest, UserService_WatchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogs not implemented")
}
func (UnimplementedUserServiceServer) CidInfo(context.Context, *CidInfoRequest) (*CidInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CidInfo not implemented")
}
func (UnimplementedUserServiceServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedUserServiceServer) NewAddress(context.Context, *NewAddressRequest) (*NewAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAddress not implemented")
}
func (UnimplementedUserServiceServer) Addresses(context.Context, *AddressesRequest) (*AddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addresses not implemented")
}
func (UnimplementedUserServiceServer) SendFil(context.Context, *SendFilRequest) (*SendFilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFil not implemented")
}
func (UnimplementedUserServiceServer) SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedUserServiceServer) VerifyMessage(context.Context, *VerifyMessageRequest) (*VerifyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMessage not implemented")
}
func (UnimplementedUserServiceServer) StorageJob(context.Context, *StorageJobRequest) (*StorageJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageJob not implemented")
}
func (UnimplementedUserServiceServer) StorageConfigForJob(context.Context, *StorageConfigForJobRequest) (*StorageConfigForJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageConfigForJob not implemented")
}
func (UnimplementedUserServiceServer) QueuedStorageJobs(context.Context, *QueuedStorageJobsRequest) (*QueuedStorageJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuedStorageJobs not implemented")
}
func (UnimplementedUserServiceServer) ExecutingStorageJobs(context.Context, *ExecutingStorageJobsRequest) (*ExecutingStorageJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutingStorageJobs not implemented")
}
func (UnimplementedUserServiceServer) LatestFinalStorageJobs(context.Context, *LatestFinalStorageJobsRequest) (*LatestFinalStorageJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestFinalStorageJobs not implemented")
}
func (UnimplementedUserServiceServer) LatestSuccessfulStorageJobs(context.Context, *LatestSuccessfulStorageJobsRequest) (*LatestSuccessfulStorageJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestSuccessfulStorageJobs not implemented")
}
func (UnimplementedUserServiceServer) StorageJobsSummary(context.Context, *StorageJobsSummaryRequest) (*StorageJobsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageJobsSummary not implemented")
}
func (UnimplementedUserServiceServer) WatchStorageJobs(*WatchStorageJobsRequest, UserService_WatchStorageJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchStorageJobs not implemented")
}
func (UnimplementedUserServiceServer) CancelStorageJob(context.Context, *CancelStorageJobRequest) (*CancelStorageJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStorageJob not implemented")
}
func (UnimplementedUserServiceServer) StorageDealRecords(context.Context, *StorageDealRecordsRequest) (*StorageDealRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDealRecords not implemented")
}
func (UnimplementedUserServiceServer) RetrievalDealRecords(context.Context, *RetrievalDealRecordsRequest) (*RetrievalDealRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievalDealRecords not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_BuildInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BuildInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/BuildInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BuildInfo(ctx, req.(*BuildInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/UserIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserIdentifier(ctx, req.(*UserIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DefaultStorageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultStorageConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DefaultStorageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/DefaultStorageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DefaultStorageConfig(ctx, req.(*DefaultStorageConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetDefaultStorageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultStorageConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetDefaultStorageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/SetDefaultStorageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetDefaultStorageConfig(ctx, req.(*SetDefaultStorageConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ApplyStorageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyStorageConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ApplyStorageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/ApplyStorageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ApplyStorageConfig(ctx, req.(*ApplyStorageConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Stage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).Stage(&userServiceStageServer{stream})
}

type UserService_StageServer interface {
	SendAndClose(*StageResponse) error
	Recv() (*StageRequest, error)
	grpc.ServerStream
}

type userServiceStageServer struct {
	grpc.ServerStream
}

func (x *userServiceStageServer) SendAndClose(m *StageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceStageServer) Recv() (*StageRequest, error) {
	m := new(StageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_StageCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageCidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StageCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/StageCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StageCid(ctx, req.(*StageCidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReplaceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReplaceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/ReplaceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReplaceData(ctx, req.(*ReplaceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).Get(m, &userServiceGetServer{stream})
}

type UserService_GetServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type userServiceGetServer struct {
	grpc.ServerStream
}

func (x *userServiceGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_WatchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).WatchLogs(m, &userServiceWatchLogsServer{stream})
}

type UserService_WatchLogsServer interface {
	Send(*WatchLogsResponse) error
	grpc.ServerStream
}

type userServiceWatchLogsServer struct {
	grpc.ServerStream
}

func (x *userServiceWatchLogsServer) Send(m *WatchLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_CidInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CidInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CidInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/CidInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CidInfo(ctx, req.(*CidInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_NewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).NewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/NewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).NewAddress(ctx, req.(*NewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Addresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Addresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/Addresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Addresses(ctx, req.(*AddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendFil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendFil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/SendFil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendFil(ctx, req.(*SendFilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/VerifyMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyMessage(ctx, req.(*VerifyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StorageJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StorageJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/StorageJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StorageJob(ctx, req.(*StorageJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StorageConfigForJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageConfigForJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StorageConfigForJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/StorageConfigForJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StorageConfigForJob(ctx, req.(*StorageConfigForJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueuedStorageJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuedStorageJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueuedStorageJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/QueuedStorageJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueuedStorageJobs(ctx, req.(*QueuedStorageJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ExecutingStorageJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutingStorageJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ExecutingStorageJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/ExecutingStorageJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ExecutingStorageJobs(ctx, req.(*ExecutingStorageJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LatestFinalStorageJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestFinalStorageJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LatestFinalStorageJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/LatestFinalStorageJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LatestFinalStorageJobs(ctx, req.(*LatestFinalStorageJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LatestSuccessfulStorageJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestSuccessfulStorageJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LatestSuccessfulStorageJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/LatestSuccessfulStorageJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LatestSuccessfulStorageJobs(ctx, req.(*LatestSuccessfulStorageJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StorageJobsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageJobsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StorageJobsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/StorageJobsSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StorageJobsSummary(ctx, req.(*StorageJobsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_WatchStorageJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchStorageJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).WatchStorageJobs(m, &userServiceWatchStorageJobsServer{stream})
}

type UserService_WatchStorageJobsServer interface {
	Send(*WatchStorageJobsResponse) error
	grpc.ServerStream
}

type userServiceWatchStorageJobsServer struct {
	grpc.ServerStream
}

func (x *userServiceWatchStorageJobsServer) Send(m *WatchStorageJobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_CancelStorageJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelStorageJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CancelStorageJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/CancelStorageJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CancelStorageJob(ctx, req.(*CancelStorageJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StorageDealRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageDealRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StorageDealRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/StorageDealRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StorageDealRecords(ctx, req.(*StorageDealRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RetrievalDealRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievalDealRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RetrievalDealRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powergate.user.v1.UserService/RetrievalDealRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RetrievalDealRecords(ctx, req.(*RetrievalDealRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powergate.user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildInfo",
			Handler:    _UserService_BuildInfo_Handler,
		},
		{
			MethodName: "UserIdentifier",
			Handler:    _UserService_UserIdentifier_Handler,
		},
		{
			MethodName: "DefaultStorageConfig",
			Handler:    _UserService_DefaultStorageConfig_Handler,
		},
		{
			MethodName: "SetDefaultStorageConfig",
			Handler:    _UserService_SetDefaultStorageConfig_Handler,
		},
		{
			MethodName: "ApplyStorageConfig",
			Handler:    _UserService_ApplyStorageConfig_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _UserService_Remove_Handler,
		},
		{
			MethodName: "StageCid",
			Handler:    _UserService_StageCid_Handler,
		},
		{
			MethodName: "ReplaceData",
			Handler:    _UserService_ReplaceData_Handler,
		},
		{
			MethodName: "CidInfo",
			Handler:    _UserService_CidInfo_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _UserService_Balance_Handler,
		},
		{
			MethodName: "NewAddress",
			Handler:    _UserService_NewAddress_Handler,
		},
		{
			MethodName: "Addresses",
			Handler:    _UserService_Addresses_Handler,
		},
		{
			MethodName: "SendFil",
			Handler:    _UserService_SendFil_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _UserService_SignMessage_Handler,
		},
		{
			MethodName: "VerifyMessage",
			Handler:    _UserService_VerifyMessage_Handler,
		},
		{
			MethodName: "StorageJob",
			Handler:    _UserService_StorageJob_Handler,
		},
		{
			MethodName: "StorageConfigForJob",
			Handler:    _UserService_StorageConfigForJob_Handler,
		},
		{
			MethodName: "QueuedStorageJobs",
			Handler:    _UserService_QueuedStorageJobs_Handler,
		},
		{
			MethodName: "ExecutingStorageJobs",
			Handler:    _UserService_ExecutingStorageJobs_Handler,
		},
		{
			MethodName: "LatestFinalStorageJobs",
			Handler:    _UserService_LatestFinalStorageJobs_Handler,
		},
		{
			MethodName: "LatestSuccessfulStorageJobs",
			Handler:    _UserService_LatestSuccessfulStorageJobs_Handler,
		},
		{
			MethodName: "StorageJobsSummary",
			Handler:    _UserService_StorageJobsSummary_Handler,
		},
		{
			MethodName: "CancelStorageJob",
			Handler:    _UserService_CancelStorageJob_Handler,
		},
		{
			MethodName: "StorageDealRecords",
			Handler:    _UserService_StorageDealRecords_Handler,
		},
		{
			MethodName: "RetrievalDealRecords",
			Handler:    _UserService_RetrievalDealRecords_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stage",
			Handler:       _UserService_Stage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _UserService_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLogs",
			Handler:       _UserService_WatchLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchStorageJobs",
			Handler:       _UserService_WatchStorageJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "powergate/user/v1/user.proto",
}
