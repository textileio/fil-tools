// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: net/rpc/rpc.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Connectedness int32

const (
	Connectedness_NotConnected  Connectedness = 0
	Connectedness_Connected     Connectedness = 1
	Connectedness_CanConnect    Connectedness = 2
	Connectedness_CannotConnect Connectedness = 3
	Connectedness_Unknown       Connectedness = 4
	Connectedness_Error         Connectedness = 5
)

// Enum value maps for Connectedness.
var (
	Connectedness_name = map[int32]string{
		0: "NotConnected",
		1: "Connected",
		2: "CanConnect",
		3: "CannotConnect",
		4: "Unknown",
		5: "Error",
	}
	Connectedness_value = map[string]int32{
		"NotConnected":  0,
		"Connected":     1,
		"CanConnect":    2,
		"CannotConnect": 3,
		"Unknown":       4,
		"Error":         5,
	}
)

func (x Connectedness) Enum() *Connectedness {
	p := new(Connectedness)
	*p = x
	return p
}

func (x Connectedness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connectedness) Descriptor() protoreflect.EnumDescriptor {
	return file_net_rpc_rpc_proto_enumTypes[0].Descriptor()
}

func (Connectedness) Type() protoreflect.EnumType {
	return &file_net_rpc_rpc_proto_enumTypes[0]
}

func (x Connectedness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connectedness.Descriptor instead.
func (Connectedness) EnumDescriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{0}
}

type PeerAddrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Addrs []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *PeerAddrInfo) Reset() {
	*x = PeerAddrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerAddrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAddrInfo) ProtoMessage() {}

func (x *PeerAddrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAddrInfo.ProtoReflect.Descriptor instead.
func (*PeerAddrInfo) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *PeerAddrInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PeerAddrInfo) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country   string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Latitude  float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrInfo *PeerAddrInfo `protobuf:"bytes,1,opt,name=addrInfo,proto3" json:"addrInfo,omitempty"`
	Location *Location     `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *PeerInfo) GetAddrInfo() *PeerAddrInfo {
	if x != nil {
		return x.AddrInfo
	}
	return nil
}

func (x *PeerInfo) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type ListenAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListenAddrRequest) Reset() {
	*x = ListenAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenAddrRequest) ProtoMessage() {}

func (x *ListenAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenAddrRequest.ProtoReflect.Descriptor instead.
func (*ListenAddrRequest) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{3}
}

type ListenAddrReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrInfo *PeerAddrInfo `protobuf:"bytes,1,opt,name=addrInfo,proto3" json:"addrInfo,omitempty"`
}

func (x *ListenAddrReply) Reset() {
	*x = ListenAddrReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenAddrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenAddrReply) ProtoMessage() {}

func (x *ListenAddrReply) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenAddrReply.ProtoReflect.Descriptor instead.
func (*ListenAddrReply) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *ListenAddrReply) GetAddrInfo() *PeerAddrInfo {
	if x != nil {
		return x.AddrInfo
	}
	return nil
}

type PeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeersRequest) Reset() {
	*x = PeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersRequest) ProtoMessage() {}

func (x *PeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersRequest.ProtoReflect.Descriptor instead.
func (*PeersRequest) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{5}
}

type PeersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*PeerInfo `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeersReply) Reset() {
	*x = PeersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersReply) ProtoMessage() {}

func (x *PeersReply) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersReply.ProtoReflect.Descriptor instead.
func (*PeersReply) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *PeersReply) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type FindPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID string `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (x *FindPeerRequest) Reset() {
	*x = FindPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPeerRequest) ProtoMessage() {}

func (x *FindPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPeerRequest.ProtoReflect.Descriptor instead.
func (*FindPeerRequest) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *FindPeerRequest) GetPeerID() string {
	if x != nil {
		return x.PeerID
	}
	return ""
}

type FindPeerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerInfo *PeerInfo `protobuf:"bytes,1,opt,name=peerInfo,proto3" json:"peerInfo,omitempty"`
}

func (x *FindPeerReply) Reset() {
	*x = FindPeerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPeerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPeerReply) ProtoMessage() {}

func (x *FindPeerReply) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPeerReply.ProtoReflect.Descriptor instead.
func (*FindPeerReply) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *FindPeerReply) GetPeerInfo() *PeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

type ConnectPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerInfo *PeerAddrInfo `protobuf:"bytes,1,opt,name=peerInfo,proto3" json:"peerInfo,omitempty"`
}

func (x *ConnectPeerRequest) Reset() {
	*x = ConnectPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPeerRequest) ProtoMessage() {}

func (x *ConnectPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPeerRequest.ProtoReflect.Descriptor instead.
func (*ConnectPeerRequest) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *ConnectPeerRequest) GetPeerInfo() *PeerAddrInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

type ConnectPeerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectPeerReply) Reset() {
	*x = ConnectPeerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPeerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPeerReply) ProtoMessage() {}

func (x *ConnectPeerReply) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPeerReply.ProtoReflect.Descriptor instead.
func (*ConnectPeerReply) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{10}
}

type DisconnectPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID string `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (x *DisconnectPeerRequest) Reset() {
	*x = DisconnectPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectPeerRequest) ProtoMessage() {}

func (x *DisconnectPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectPeerRequest.ProtoReflect.Descriptor instead.
func (*DisconnectPeerRequest) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *DisconnectPeerRequest) GetPeerID() string {
	if x != nil {
		return x.PeerID
	}
	return ""
}

type DisconnectPeerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectPeerReply) Reset() {
	*x = DisconnectPeerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectPeerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectPeerReply) ProtoMessage() {}

func (x *DisconnectPeerReply) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectPeerReply.ProtoReflect.Descriptor instead.
func (*DisconnectPeerReply) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{12}
}

type ConnectednessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID string `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (x *ConnectednessRequest) Reset() {
	*x = ConnectednessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectednessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectednessRequest) ProtoMessage() {}

func (x *ConnectednessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectednessRequest.ProtoReflect.Descriptor instead.
func (*ConnectednessRequest) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectednessRequest) GetPeerID() string {
	if x != nil {
		return x.PeerID
	}
	return ""
}

type ConnectednessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectedness Connectedness `protobuf:"varint,1,opt,name=connectedness,proto3,enum=net.rpc.Connectedness" json:"connectedness,omitempty"`
}

func (x *ConnectednessReply) Reset() {
	*x = ConnectednessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_rpc_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectednessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectednessReply) ProtoMessage() {}

func (x *ConnectednessReply) ProtoReflect() protoreflect.Message {
	mi := &file_net_rpc_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectednessReply.ProtoReflect.Descriptor instead.
func (*ConnectednessReply) Descriptor() ([]byte, []int) {
	return file_net_rpc_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectednessReply) GetConnectedness() Connectedness {
	if x != nil {
		return x.Connectedness
	}
	return Connectedness_NotConnected
}

var File_net_rpc_rpc_proto protoreflect.FileDescriptor

var file_net_rpc_rpc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x65, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x22, 0x34, 0x0a, 0x0c,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x22, 0x5e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0x6c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x0a, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3e, 0x0a,
	0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d,
	0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x2a, 0x6b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x05, 0x32, 0xac, 0x03, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x12, 0x44, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x74,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x05, 0x5a, 0x03, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_net_rpc_rpc_proto_rawDescOnce sync.Once
	file_net_rpc_rpc_proto_rawDescData = file_net_rpc_rpc_proto_rawDesc
)

func file_net_rpc_rpc_proto_rawDescGZIP() []byte {
	file_net_rpc_rpc_proto_rawDescOnce.Do(func() {
		file_net_rpc_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_net_rpc_rpc_proto_rawDescData)
	})
	return file_net_rpc_rpc_proto_rawDescData
}

var file_net_rpc_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_net_rpc_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_net_rpc_rpc_proto_goTypes = []interface{}{
	(Connectedness)(0),            // 0: net.rpc.Connectedness
	(*PeerAddrInfo)(nil),          // 1: net.rpc.PeerAddrInfo
	(*Location)(nil),              // 2: net.rpc.Location
	(*PeerInfo)(nil),              // 3: net.rpc.PeerInfo
	(*ListenAddrRequest)(nil),     // 4: net.rpc.ListenAddrRequest
	(*ListenAddrReply)(nil),       // 5: net.rpc.ListenAddrReply
	(*PeersRequest)(nil),          // 6: net.rpc.PeersRequest
	(*PeersReply)(nil),            // 7: net.rpc.PeersReply
	(*FindPeerRequest)(nil),       // 8: net.rpc.FindPeerRequest
	(*FindPeerReply)(nil),         // 9: net.rpc.FindPeerReply
	(*ConnectPeerRequest)(nil),    // 10: net.rpc.ConnectPeerRequest
	(*ConnectPeerReply)(nil),      // 11: net.rpc.ConnectPeerReply
	(*DisconnectPeerRequest)(nil), // 12: net.rpc.DisconnectPeerRequest
	(*DisconnectPeerReply)(nil),   // 13: net.rpc.DisconnectPeerReply
	(*ConnectednessRequest)(nil),  // 14: net.rpc.ConnectednessRequest
	(*ConnectednessReply)(nil),    // 15: net.rpc.ConnectednessReply
}
var file_net_rpc_rpc_proto_depIdxs = []int32{
	1,  // 0: net.rpc.PeerInfo.addrInfo:type_name -> net.rpc.PeerAddrInfo
	2,  // 1: net.rpc.PeerInfo.location:type_name -> net.rpc.Location
	1,  // 2: net.rpc.ListenAddrReply.addrInfo:type_name -> net.rpc.PeerAddrInfo
	3,  // 3: net.rpc.PeersReply.peers:type_name -> net.rpc.PeerInfo
	3,  // 4: net.rpc.FindPeerReply.peerInfo:type_name -> net.rpc.PeerInfo
	1,  // 5: net.rpc.ConnectPeerRequest.peerInfo:type_name -> net.rpc.PeerAddrInfo
	0,  // 6: net.rpc.ConnectednessReply.connectedness:type_name -> net.rpc.Connectedness
	4,  // 7: net.rpc.RPC.ListenAddr:input_type -> net.rpc.ListenAddrRequest
	6,  // 8: net.rpc.RPC.Peers:input_type -> net.rpc.PeersRequest
	8,  // 9: net.rpc.RPC.FindPeer:input_type -> net.rpc.FindPeerRequest
	10, // 10: net.rpc.RPC.ConnectPeer:input_type -> net.rpc.ConnectPeerRequest
	12, // 11: net.rpc.RPC.DisconnectPeer:input_type -> net.rpc.DisconnectPeerRequest
	14, // 12: net.rpc.RPC.Connectedness:input_type -> net.rpc.ConnectednessRequest
	5,  // 13: net.rpc.RPC.ListenAddr:output_type -> net.rpc.ListenAddrReply
	7,  // 14: net.rpc.RPC.Peers:output_type -> net.rpc.PeersReply
	9,  // 15: net.rpc.RPC.FindPeer:output_type -> net.rpc.FindPeerReply
	11, // 16: net.rpc.RPC.ConnectPeer:output_type -> net.rpc.ConnectPeerReply
	13, // 17: net.rpc.RPC.DisconnectPeer:output_type -> net.rpc.DisconnectPeerReply
	15, // 18: net.rpc.RPC.Connectedness:output_type -> net.rpc.ConnectednessReply
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_net_rpc_rpc_proto_init() }
func file_net_rpc_rpc_proto_init() {
	if File_net_rpc_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_net_rpc_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerAddrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenAddrReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPeerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPeerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectPeerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectednessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_rpc_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectednessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_net_rpc_rpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_net_rpc_rpc_proto_goTypes,
		DependencyIndexes: file_net_rpc_rpc_proto_depIdxs,
		EnumInfos:         file_net_rpc_rpc_proto_enumTypes,
		MessageInfos:      file_net_rpc_rpc_proto_msgTypes,
	}.Build()
	File_net_rpc_rpc_proto = out.File
	file_net_rpc_rpc_proto_rawDesc = nil
	file_net_rpc_rpc_proto_goTypes = nil
	file_net_rpc_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCClient interface {
	ListenAddr(ctx context.Context, in *ListenAddrRequest, opts ...grpc.CallOption) (*ListenAddrReply, error)
	Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersReply, error)
	FindPeer(ctx context.Context, in *FindPeerRequest, opts ...grpc.CallOption) (*FindPeerReply, error)
	ConnectPeer(ctx context.Context, in *ConnectPeerRequest, opts ...grpc.CallOption) (*ConnectPeerReply, error)
	DisconnectPeer(ctx context.Context, in *DisconnectPeerRequest, opts ...grpc.CallOption) (*DisconnectPeerReply, error)
	Connectedness(ctx context.Context, in *ConnectednessRequest, opts ...grpc.CallOption) (*ConnectednessReply, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) ListenAddr(ctx context.Context, in *ListenAddrRequest, opts ...grpc.CallOption) (*ListenAddrReply, error) {
	out := new(ListenAddrReply)
	err := c.cc.Invoke(ctx, "/net.rpc.RPC/ListenAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersReply, error) {
	out := new(PeersReply)
	err := c.cc.Invoke(ctx, "/net.rpc.RPC/Peers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) FindPeer(ctx context.Context, in *FindPeerRequest, opts ...grpc.CallOption) (*FindPeerReply, error) {
	out := new(FindPeerReply)
	err := c.cc.Invoke(ctx, "/net.rpc.RPC/FindPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ConnectPeer(ctx context.Context, in *ConnectPeerRequest, opts ...grpc.CallOption) (*ConnectPeerReply, error) {
	out := new(ConnectPeerReply)
	err := c.cc.Invoke(ctx, "/net.rpc.RPC/ConnectPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DisconnectPeer(ctx context.Context, in *DisconnectPeerRequest, opts ...grpc.CallOption) (*DisconnectPeerReply, error) {
	out := new(DisconnectPeerReply)
	err := c.cc.Invoke(ctx, "/net.rpc.RPC/DisconnectPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Connectedness(ctx context.Context, in *ConnectednessRequest, opts ...grpc.CallOption) (*ConnectednessReply, error) {
	out := new(ConnectednessReply)
	err := c.cc.Invoke(ctx, "/net.rpc.RPC/Connectedness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
type RPCServer interface {
	ListenAddr(context.Context, *ListenAddrRequest) (*ListenAddrReply, error)
	Peers(context.Context, *PeersRequest) (*PeersReply, error)
	FindPeer(context.Context, *FindPeerRequest) (*FindPeerReply, error)
	ConnectPeer(context.Context, *ConnectPeerRequest) (*ConnectPeerReply, error)
	DisconnectPeer(context.Context, *DisconnectPeerRequest) (*DisconnectPeerReply, error)
	Connectedness(context.Context, *ConnectednessRequest) (*ConnectednessReply, error)
}

// UnimplementedRPCServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (*UnimplementedRPCServer) ListenAddr(context.Context, *ListenAddrRequest) (*ListenAddrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenAddr not implemented")
}
func (*UnimplementedRPCServer) Peers(context.Context, *PeersRequest) (*PeersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peers not implemented")
}
func (*UnimplementedRPCServer) FindPeer(context.Context, *FindPeerRequest) (*FindPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPeer not implemented")
}
func (*UnimplementedRPCServer) ConnectPeer(context.Context, *ConnectPeerRequest) (*ConnectPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectPeer not implemented")
}
func (*UnimplementedRPCServer) DisconnectPeer(context.Context, *DisconnectPeerRequest) (*DisconnectPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectPeer not implemented")
}
func (*UnimplementedRPCServer) Connectedness(context.Context, *ConnectednessRequest) (*ConnectednessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connectedness not implemented")
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_ListenAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).ListenAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.rpc.RPC/ListenAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).ListenAddr(ctx, req.(*ListenAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.rpc.RPC/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Peers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_FindPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).FindPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.rpc.RPC/FindPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).FindPeer(ctx, req.(*FindPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_ConnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).ConnectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.rpc.RPC/ConnectPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).ConnectPeer(ctx, req.(*ConnectPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DisconnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DisconnectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.rpc.RPC/DisconnectPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DisconnectPeer(ctx, req.(*DisconnectPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Connectedness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectednessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Connectedness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.rpc.RPC/Connectedness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Connectedness(ctx, req.(*ConnectednessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net.rpc.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListenAddr",
			Handler:    _RPC_ListenAddr_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _RPC_Peers_Handler,
		},
		{
			MethodName: "FindPeer",
			Handler:    _RPC_FindPeer_Handler,
		},
		{
			MethodName: "ConnectPeer",
			Handler:    _RPC_ConnectPeer_Handler,
		},
		{
			MethodName: "DisconnectPeer",
			Handler:    _RPC_DisconnectPeer_Handler,
		},
		{
			MethodName: "Connectedness",
			Handler:    _RPC_Connectedness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net/rpc/rpc.proto",
}
